
<div class="container">

    <style>
        .axis path, .axis line  {
            fill: none;
            stroke: black;
            stroke-width: 1;
            shape-rendering: crispEdges;
            opacity: 0.9;
        }
        .axis text {
            font-family: Lato;
            font-size: 13px;
        }
        .grid .tick {
            stroke: lightgrey;
            stroke-opacity: 0.5;
            stroke-width: 1;
            shape-rendering: crispEdges;
        }
        .grid path {
            stroke-width: 0;
        }



    </style>

    <div class="jumbotron">
        <svg id="visualisation" width="1000" height="800"></svg>
    </div>



</div>



<script type="text/javascript">

    {# script pour D3js #}
    function InitChart(donneesGraph) {
        console.log('############################################## DEBUG CHART D3JS ################################################');

        // initializer svg
        $("svg").find("g").remove();
        $("svg").find("path").remove();

        console.log('in function donneesGraph: ' + JSON.stringify(donneesGraph));


        var dateDebutGraph = donneesGraph.dateDebutGraph;
        var dateFinGraph = donneesGraph.dateFinGraph;
        var formatResultat = donneesGraph.formatResultat ;
        var nbrLabelXAxis = donneesGraph.nbrLabelXAxis ;
        var maxValeurYAxis = (donneesGraph.maxValeurYAxis)*1.1;
        var typeRapport = donneesGraph.typeRapport ;

        var donneesNbrConnexions = donneesGraph.donneesNbrConnexions;
        var donneesNbrLancementOptiPoule = donneesGraph.donneesNbrLancementOptiPoule;
        var donneesNbrLancementMeilleurLieu = donneesGraph.donneesNbrLancementMeilleurLieu;
        var donneesNbrRequetesHere = donneesGraph.donneesNbrRequetesHere;
        var donneesNbrInterdictions = donneesGraph.donneesNbrInterdictions;
        var donneesNbrRepartitionsHomogenes = donneesGraph.donneesNbrRepartitionsHomogenes;
        var donneesNbrExclusions = donneesGraph.donneesNbrExclusions;

        if(typeRapport === "utilisateur" || typeRapport === "federation" ){
            var rapportUtilisateur = [donneesNbrConnexions, donneesNbrLancementOptiPoule, donneesNbrLancementMeilleurLieu, donneesNbrInterdictions,
                donneesNbrRepartitionsHomogenes, donneesNbrExclusions, donneesNbrRequetesHere ];
            var tailleSvg = 800;
            var libelleRapportUtilisateur = ['Nombre de connexions à Optimouv',
                'Nombre de lancements de la fonction optimisation des poules',
                'Nombre de lancements de la fonction meilleur lieu de rencontre',
                'Nombre d\'interdictions utilisées',
                'Nombre de répartitions homogènes utilisées',
                'Nombre d\'exclusions géographiques utilisées',
                'Nombre de requête HERE effectuées (toutes fonctions confondues)']
            var indexCouleurRequetesHere = 6;
        }
        else{
            var rapportUtilisateur  = [donneesNbrConnexions, donneesNbrLancementOptiPoule, donneesNbrLancementMeilleurLieu, donneesNbrRequetesHere];
            var tailleSvg = 700;
            var libelleRapportUtilisateur = ['Nombre de connexions à Optimouv',
                'Nombre de lancements de la fonction optimisation des poules',
                'Nombre de lancements de la fonction meilleur lieu de rencontre',
                'Nombre de requête HERE effectuées (toutes fonctions confondues)']
            var indexCouleurRequetesHere = 3;
        }

        // fixer la largeur de svg selon le type de rapport
        $("#visualisation").attr("height",  tailleSvg);




//        console.log('dateDebutGraph: ' + dateDebutGraph);
//        console.log('dateFinGraph: ' + dateFinGraph);

        var mindate = new Date(dateDebutGraph);
        var maxdate = new Date(dateFinGraph);

        var svg = d3.select("#visualisation"),
                WIDTH = 1000,
                HEIGHT = 550,
                MARGINS = {
                    top: 20,
                    right: 50,
                    bottom: 20,
                    left: 50
                };


        if(formatResultat == "jour"){
            var xScale = d3.time.scale().range([MARGINS.left, WIDTH- MARGINS.right]).domain([mindate, maxdate]);
            var xAxis = d3.svg.axis()
                    .scale(xScale);

            var deltaJours = Math.floor(nbrLabelXAxis/7) + 1;
//            console.log('deltaJours: ' + deltaJours);

            xAxis.ticks(d3.time.day, deltaJours)
                    .tickFormat(d3.time.format("%d/%m/%Y"));

        }
        else if(formatResultat == "mois"){

            var xScale = d3.time.scale().range([MARGINS.left, WIDTH- MARGINS.right]).domain([mindate, maxdate]);
            var xAxis = d3.svg.axis()
                    .scale(xScale);

            var deltaMois = Math.floor(nbrLabelXAxis/7) + 1;
            if(nbrLabelXAxis > 3){

                xAxis.ticks(d3.time.month, deltaMois)
                        .tickFormat(d3.time.format("%m/%Y"));
            }
            else{

                xAxis.ticks(d3.time.week, deltaMois)
                        .tickFormat(d3.time.format("%d/%m/%Y"));
            }



        }
        else if(formatResultat == "annee"){
            var xScale = d3.time.scale().range([MARGINS.left, WIDTH- MARGINS.right]).domain([mindate, maxdate]);
            var xAxis = d3.svg.axis()
                    .scale(xScale);


            if(nbrLabelXAxis > 3){
                var deltaAnnee = Math.floor(nbrLabelXAxis/7) + 1;

                xAxis.ticks(d3.time.year, deltaAnnee)
                        .tickFormat(d3.time.format("%Y"));
            }
            else{
                var deltaAnnee = Math.floor(nbrLabelXAxis/7) + 2;

                xAxis.ticks(d3.time.month, deltaAnnee)
                        .tickFormat(d3.time.format("%m/%Y"));

            }


        }

        var yScale =  d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([0, maxValeurYAxis]);
        var yAxis = d3.svg.axis()
                        .scale(yScale)
                        .orient("left");

        // x-axis
        svg.append("svg:g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", function(d) {
                    return "rotate(-65)"
                });;

        // y-axis
        svg.append("svg:g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + (MARGINS.left) + ",0)")
                .call(yAxis);


        var parseDate = d3.time.format("%Y/%m/%d").parse;

        var lineGen = d3.svg.line()
                .x(function(d) {
                    return xScale(
                            parseDate(d.dateMod)
                    );
                })
                .y(function(d) {
                    return yScale(d.valeur);
                });
//                .interpolate("basis");


        var couleurs = ['#d00c05', '#f1c62a', '#0d5c35', '#d400ff', '#5eb6dd', '#8fcf3c', '#ff5900', '#ff73bf', '#52251c', '#0a1574', '#ff9300', '#6b1a6a', '#41ab7b','#c2314e', '#444459', '#b99654', '#a44906', '#023548', '#b2b2b2', '#616600', '#790000', '#147376', '#d4cd4a', '#95b37c', '#006d80' ];


        var tailleLigne = 2;
        svg.append('svg:path')
                .attr('d', lineGen(donneesNbrConnexions))
                .attr('stroke', couleurs[0])
                .attr('stroke-width', tailleLigne)
                .attr('fill', 'none');
        svg.append('svg:path')
                .attr('d', lineGen(donneesNbrLancementOptiPoule))
                .attr('stroke', couleurs[1])
                .attr('stroke-width', tailleLigne)
                .attr('fill', 'none');
        svg.append('svg:path')
                .attr('d', lineGen(donneesNbrLancementMeilleurLieu))
                .attr('stroke', couleurs[2])
                .attr('stroke-width', tailleLigne)
                .attr('fill', 'none');

        svg.append('svg:path')
                .attr('d', lineGen(donneesNbrRequetesHere))
                .attr('stroke', couleurs[indexCouleurRequetesHere])
                .attr('stroke-width', tailleLigne)
                .attr('fill', 'none');


        // pour le rapport
        if(typeRapport === "utilisateur" || typeRapport === "federation" ){
            svg.append('svg:path')
                    .attr('d', lineGen(donneesNbrInterdictions))
                    .attr('stroke', couleurs[3])
                    .attr('stroke-width', tailleLigne)
                    .attr('fill', 'none');
            svg.append('svg:path')
                    .attr('d', lineGen(donneesNbrRepartitionsHomogenes))
                    .attr('stroke', couleurs[4])
                    .attr('stroke-width', tailleLigne)
                    .attr('fill', 'none');
            svg.append('svg:path')
                    .attr('d', lineGen(donneesNbrExclusions))
                    .attr('stroke', couleurs[5])
                    .attr('stroke-width', tailleLigne)
                    .attr('fill', 'none');
        }


        // ajouter legende
        var w = 100;
        var legend = svg.append("g")
                .attr("class", "legend")
                .attr("x", w)
                .attr("y", 50)
                .attr("height", 100)
                .attr("width", 100)
                .attr('transform', 'translate(100,630)');

        legend.selectAll('rect')
                .data(rapportUtilisateur)
                .enter()
                .append("rect")
                .attr("x", w)
                .attr("y", function(d, i) {
                    return i * 20;
                })
                .attr("width", function (d) {
                    if (d.length > 0){
                        return 10;
                    } else {
                        return 0;
                    }
                })
                .attr("height", function (d) {
                    if (d.length > 0){
                        return 10;
                    } else {
                        return 0;
                    }
                })
                .style("fill", function(d,i) {
                    if (d.length > 0){
                        return  couleurs[i];
                    }
                })
        ;

        legend.selectAll('text')
                .data(rapportUtilisateur)
                .enter()
                .append("text")
                .attr("x", w + 20)
                .attr("y", function(d, i) {
                    return i * 20 + 9;
                })
                .text(function(d,i) {
                    if (d.length > 0 ){
                        return libelleRapportUtilisateur[i];
                    }
                })
                .style("color", "#9C9D9F")
                .style("font-size","14px")
                .style("font-weight","bold");


        // function for the x grid lines
        function make_x_axis() {
            return d3.svg.axis()
                    .scale(xScale)
                    .orient("bottom")
                    .ticks(5)
        }

        // function for the y grid lines
        function make_y_axis() {
            return d3.svg.axis()
                    .scale(yScale)
                    .orient("left")
                    .ticks(5)
        }

        // Draw the x Grid lines
        svg.append("g")
                .attr("class", "grid")
                .attr("transform", "translate(0," + HEIGHT + ")")
                .call(make_x_axis()
                        .tickSize(-HEIGHT, 0, 0)
                        .tickFormat("")
                )

        // Draw the y Grid lines
        svg.append("g")
                .attr("class", "grid")
                .call(make_y_axis()
                        .tickSize(-WIDTH, 0, 0)
                        .tickFormat("")
                )

    }
</script>


