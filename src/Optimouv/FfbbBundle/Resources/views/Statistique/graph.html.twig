
<div class="container">

    <style>
        .axis path, .axis line  {
            fill: none;
            stroke: black;
            shape-rendering: crispEdges;
        }
        .axis text {
            font-family: Lato;
            font-size: 13px;
        }


    </style>

    <div class="jumbotron">
        <svg id="visualisation" width="1000" height="620"></svg>
    </div>



</div>



<script type="text/javascript">

    {# script pour D3js #}
    function InitChart(donneesGraph) {
        console.log('############################################## DEBUG CHART D3JS ################################################');

        // initializer svg
        $("svg").find("g").remove();

        console.log('in function donneesGraph: ' + JSON.stringify(donneesGraph));


        var dateDebutGraph = donneesGraph.dateDebutGraph;
        var dateFinGraph = donneesGraph.dateFinGraph;
        var formatResultat = donneesGraph.formatResultat ;
        var nbrLabelXAxis = donneesGraph.nbrLabelXAxis ;
        var maxValeurYAxis = donneesGraph.maxValeurYAxis ;
        var donneesNbrConnexions = donneesGraph.donneesNbrConnexions;


//        console.log('dateDebutGraph: ' + dateDebutGraph);
//        console.log('dateFinGraph: ' + dateFinGraph);

        console.log('donneesNbrConnexions: ' + JSON.stringify(donneesNbrConnexions));


        var mindate = new Date(dateDebutGraph);
        var maxdate = new Date(dateFinGraph);


        var svg = d3.select("#visualisation"),
                WIDTH = 1000,
                HEIGHT = 550,
                MARGINS = {
                    top: 20,
                    right: 50,
                    bottom: 20,
                    left: 50
                };


        if(formatResultat == "jour"){
            var xScale = d3.time.scale().range([MARGINS.left, WIDTH- MARGINS.right]).domain([mindate, maxdate]);
            var xAxis = d3.svg.axis()
                    .scale(xScale);

            var deltaJours = Math.floor(nbrLabelXAxis/7) + 1;
//            console.log('deltaJours: ' + deltaJours);

            xAxis.ticks(d3.time.day, deltaJours)
                    .tickFormat(d3.time.format("%d/%m/%Y"));

        }
        else if(formatResultat == "mois"){

            var xScale = d3.time.scale().range([MARGINS.left, WIDTH- MARGINS.right]).domain([mindate, maxdate]);
            var xAxis = d3.svg.axis()
                    .scale(xScale);

            var deltaMois = Math.floor(nbrLabelXAxis/7) + 1;

            xAxis.ticks(d3.time.month, deltaMois)
                    .tickFormat(d3.time.format("%m/%Y"));

        }
        else if(formatResultat == "annee"){
            var xScale = d3.time.scale().range([MARGINS.left, WIDTH- MARGINS.right]).domain([mindate, maxdate]);
            var xAxis = d3.svg.axis()
                    .scale(xScale);


            var deltaAnnee = Math.floor(nbrLabelXAxis/7) + 1;

            xAxis.ticks(d3.time.year, deltaAnnee)
                    .tickFormat(d3.time.format("%Y"));

        }

        var yScale =  d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([0, maxValeurYAxis]);
        var yAxis = d3.svg.axis()
                        .scale(yScale)
                        .orient("left");

        // x-axis
        svg.append("svg:g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + (HEIGHT - MARGINS.bottom) + ")")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", function(d) {
                    return "rotate(-65)"
                });;

        // y-axis
        svg.append("svg:g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + (MARGINS.left) + ",0)")
                .call(yAxis);


        var parseDate = d3.time.format("%Y/%m/%d").parse;

        var lineGen = d3.svg.line()
                .x(function(d) {
                    return xScale(parseDate(d.dateMod));
                })
                .y(function(d) {
                    return yScale(d.valeur);
                })
                .interpolate("basis");


        svg.append('svg:path')
                .attr('d', lineGen(donneesNbrConnexions))
                .attr('stroke', 'green')
                .attr('stroke-width', 2)
                .attr('fill', 'none');



    }
</script>


